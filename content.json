[{"title":"SAP 常用表","date":"2019-09-09T15:21:00.000Z","path":"2019/09/09/SAP常用表/","text":"SAP 各模块常用表…… 核心模块FI 表名 描述 t001 ska1 skb1 bkpf bseg bsik bsak bsid bsad kna1 knb1 lfa1 lfb1 CRMBT(Business Transaction) 表名 描述 CRMD_ORDERADM_H 单据抬头 CRMD_ORDERADM_I 单据明细 DD07T 域值的下拉列表描述 CRM_JEST 单据状态 TJ30T 用户状态&amp;参数文件&amp;状态的描述 CRMC_PROC_TYPE 单据类型与状态参数文件的对应关系 CRMC_PROC_TYPE_T 单据类型的描述 CRMC_OBJECTS_GEN AET增强对象的表&amp;对象名&amp;自生成表结构 CRMD_BRELVONAE 单据的前后序关系 BP(Business Partner) 表名 描述 BUT000 客户主数据 BUT050 客户的关系 BUT100 客户的角色 TBZ9A 关系的描述 TB001 BU_GROUP及其描述 ADR2 电话 ADCP 职能/部门 USR21 用户所在表 Installation based 表名 描述 IBIB IBIN IBST CRMD_MPK_READING 安装点 - 计数器 Others 表名 描述 STXL 长文本相关 STXH TTXID TTXIT axt_run_fielddef AET字段及其数据元素 参考链接： https://wiki.scn.sap.com/wiki/display/CRM/SAP+CRM+Some+more+tables http://www.tcodesearch.com/sap-tables/search?q=bp+change+history Marketing 表名 描述 CUAND_CE_IC_ROOT CUAND_CE_IA_RT CUAND_CE_IC_FCET","categories":[],"tags":[{"name":"sap","slug":"sap","permalink":"http://yoursite.com/tags/sap/"}]},{"title":"Python-Module_usecase","date":"2019-08-15T08:07:46.000Z","path":"2019/08/15/Python-Module-usecase/","text":"Python常用模块的用法及demo 1. 基础模块datetime datetime 模块提供了一些类用于操作日期时间及其相关的计算。比较常用三个类型： date 封装了日期操作 datetime 封装日期+时间操作 timedelta 表示一个时间间隔，也就是日期时间的差值 Demo1 :12345678910111213141516171819202122# 日期时间的获取In [1]: from datetime import date, datetime, timedeltaIn [2]: date.today()Out[2]: datetime.date(2018, 12, 7)In [3]: datetime.utcnow()Out[3]: datetime.datetime(2018, 12, 7, 7, 1, 23, 844015)In [4]: t = datetime.now()In [5]: tOut[5]: datetime.datetime(2018, 12, 7, 15, 1, 43, 880715)In [6]: t.dayOut[6]: 7In [7]: t.yearOut[7]: 2018In [8]: t.minuteOut[8]: 1 Demo2 :123456789# datetime 对象与字符串之间的相互转换In [9]: tOut[9]: datetime.datetime(2018, 12, 7, 15, 1, 43, 880715)In [10]: datetime.strftime(t, '%Y-%m-%d %H:%M:%S')Out[10]: '2018-12-07 15:01:43'In [11]: datetime.strptime('2018-12-07 00:00:00', '%Y-%m-%d %H:%M:%S')Out[11]: datetime.datetime(2018, 12, 7, 0, 0) Demo3 :1234567891011# 用 timedelta 表示时间差值，可以精确到微妙In [12]: timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, ...: hours=0, weeks=0)Out[12]: datetime.timedelta(0)# 用 timedelta 对 datetime 进行加减操作In [13]: tOut[13]: datetime.datetime(2018, 12, 7, 15, 1, 43, 880715)In [14]: t + timedelta(weeks=1, days=-3, hours=3, minutes=-10)Out[14]: datetime.datetime(2018, 12, 11, 17, 51, 43, 880715) os定义 :这个库模块提供了一些接口来获取操作系统的一些信息和使用操作系统功能，主要的用途是获取和处理文件及文件夹属性 常用方法 : os.path.abspath(path) 返回文件的绝对路径 os.path.basename(path) 返回文件名 os.path.dirname(path) 返回文件路径 os.path.isfile(path) 判断路径是否为文件 os.path.isdir(path) 判断路径是否为目录 os.path.exists(path) 判断路径是否存在 os.path.join(path1[, path2[, …]]) 把目录和文件名合成一个路径 Demo1 :123456789101112131415161718192021222324In [1]: import osIn [2]: filename = '/Users/junlinhe/courses.json'In [3]: os.path.abspath(filename)Out[3]: '/Users/junlinhe/courses.json'In [4]: os.path.basename(filename)Out[4]: 'courses.json'In [5]: os.path.dirname(filename)Out[5]: '/Users/junlinhe'In [6]: os.path.isfile(filename)Out[6]: TrueIn [7]: os.path.isdir(filename)Out[7]: FalseIn [8]: os.path.exists(filename)Out[8]: TrueIn [10]: os.path.join('/Users/junlinhe/', 'courses.json')Out[10]: '/Users/junlinhe/courses.json' Demo2 :123456789101112131415In [1]: import osIn [2]: os.getcwd()Out[2]: '/Users/junlinhe/Code'# 生成 n 个字节的随机数，用于加密，比如作为 Flask 的 SECRETE_KEYIn [3]: os.urandom(24)Out[3]: b'r@t\\x96\\x1b\\xb5\\xab\\xb5\\xe5\\xa4\\xd52N\\x8b\\xfa$\\x91:\\xabHs\\xb9\\x9f\\xa8'# 在当前目录创建一个目录In [4]: os.mkdir('web-app')# 在当前目录创建一个 app.py 文件# 此处可能会报错：权限不够In [5]: os.mknod(os.getcwd() + '/app.py') sysUsage : 获取命令行参数Demo1 :1234567import sysprint(\"Program:\", sys.argv[0])print(\"Parameters:\")for i, x in enumerate(sys.argv): if (i == 0): continue print(i, x) pickle定义 :通过一个实例将 Python 的一个字典存入到文件中并读取出来恢复成字典对象。注意写入和读取文件都需要使用 b 二进制模式。 Usage : Demo :123456789101112131415161718# 如果只是想将对象序列化成一个字节流，那可以使用 pickle.dumps(obj)In [1]: import pickleIn [2]: courses = &#123;1: 'Linux', 2: 'Vim', 3: 'Git'&#125;In [3]: with open('./courses.data', 'wb') as file: ...: pickle.dump(courses, file) ...:In [4]: with open('./courses.data', 'rb') as file: ...: new_courses = pickle.load(file) ...:In [5]: new_coursesOut[5]: &#123;1: 'Linux', 2: 'Vim', 3: 'Git'&#125;In [6]: type(new_courses)Out[6]: dict json JSON 序列化后的内容为字符串，文本写入和读取不需要用二进制格式 序列化：dumps反序列化：loads Demo : 1234567891011121314151617In [1]: import jsonIn [2]: courses = &#123;1: 'Linux', 2: 'Vim', 3: 'Git'&#125;In [3]: json.dumps(courses)Out[3]: '&#123;\"1\": \"Linux\", \"2\": \"Vim\", \"3\": \"Git\"&#125;'In [4]: with open('courses.json', 'w') as file: ...: file.write(json.dumps(courses)) ...:In [5]: with open('courses.json', 'r') as file: ...: new_courses = json.loads(file.read()) ...:In [6]: new_coursesOut[6]: &#123;'1': 'Linux', '2': 'Vim', '3': 'Git'&#125; zip定义 ：zip函数 接受任意多个可迭代对象作为参数 ,将对象中对应的元素打包成一个tuple,然后返回一个可迭代的zip对象，这个可迭代对象可以使用循环的方式列出其元素。若多个可迭代对象的长度不一致,则所返回的列表与长度最短的可迭代对象相同. Usage : 用两个列表生成一个zip对象Demo1 :1234567891011121314# 第n次返回每个列表元素的第n-1个元素，每个列表返回的元素组成一个数组&gt;&gt;&gt; a1=[1,2,3]&gt;&gt;&gt; a2=[4,5,6]&gt;&gt;&gt; a3=[7,8,9]&gt;&gt;&gt; a4=[\"a\",\"b\",\"c\",\"d\"]&gt;&gt;&gt; zip1=zip(a1,a2,a3)&gt;&gt;&gt; print(zip1)&lt;zip object at 0x7f5a22651c08&gt;&gt;&gt;&gt; for i in zip1:... print(i)... (1, 4, 7)(2, 5, 8)(3, 6, 9) Demo2 :123456789&gt;&gt;&gt; zip2=zip(a1,a2,a4)&gt;&gt;&gt; print(zip2)&lt;zip object at 0x7f5a22651d48&gt;&gt;&gt;&gt; for j in zip2:... print(j)... (1, 4, 'a')(2, 5, 'b')(3, 6, 'c') Demo3 :12345678910&gt;&gt;&gt; zip3=zip(a4)&gt;&gt;&gt; print(zip3)&lt;zip object at 0x7f5a22651d08&gt;&gt;&gt;&gt; for i in zip3:... print(i)... ('a',)('b',)('c',)('d',) Demo4:12345678910111213141516\"\"\"In [12]: print(*a4)a b c dIn [13]: print(a4)['a', 'b', 'c', 'd']\"\"\"&gt;&gt;&gt; zip4=zip(*a4 *3)&gt;&gt;&gt; &gt;&gt;&gt; print(zip4)&lt;zip object at 0x7f5a22651f08&gt;&gt;&gt;&gt; for j in zip4:... print(j)... ('a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd') 二维矩阵变换(矩阵的行列互换) Demo :123456789101112# ll每个元素的长度相同&gt;&gt;&gt; l1=[[1,2,3],[4,5,6],[7,8,9]]&gt;&gt;&gt; print([[j[i] for j in l1] for i in range(len(l1[0])) ])[[1, 4, 7], [2, 5, 8], [3, 6, 9]]&gt;&gt;&gt; zip(*l1)&lt;zip object at 0x7f5a22651f88&gt;&gt;&gt;&gt; for i in zip(*l1):... print(i)... (1, 4, 7)(2, 5, 8)(3, 6, 9) collectionscollections 模块主要提供了一些特别的容器类 OrderedDict OrderedDict 是一个特殊的字典。字典本质上是一个哈希表，其实现一般是无序的，OrderedDict 能保持元素插入的顺序： OrderedDict 同样能以元素插入的顺序来进行迭代或者序列化 Demo :123456789101112131415161718192021222324252627282930In [1]: from collections import OrderedDictIn [2]: d = OrderedDict()In [3]: d['apple'] = 1In [4]: d['google'] = 2In [5]: d['facebook'] = 3In [6]: d['amazon'] = 4In [7]: dOut[7]: OrderedDict([('apple', 1), ('google', 2), ('facebook', 3), ('amazon', 4)])In [7]: dOut[7]: OrderedDict([('apple', 1), ('google', 2), ('facebook', 3), ('amazon', 4)])In [8]: for key in d: ...: print(key, d[key]) ...:apple 1google 2facebook 3amazon 4In [9]: import jsonIn [10]: json.dumps(d)Out[10]: '&#123;\"apple\": 1, \"google\": 2, \"facebook\": 3, \"amazon\": 4&#125;' namedtuple 使用普通的元组（tuple）存在一个问题，每次用下标去获取元素，可能会不知道你这个下标下的元素到底代表什么。namedtuple 能够用来创建类似于元组的类型，可以用索引来访问数据，能够迭代，也可以通过属性名访问数据。让你能够更方便实用的代码 Demo :123456789101112# 使用命名元组表示坐标系中的点In [11]: from collections import namedtupleIn [12]: Point = namedtuple('Point', ['x', 'y'])In [13]: p = Point(10, 12)In [14]: p.xOut[14]: 10In [15]: p.yOut[15]: 12 Counter Counter 用来统计一个可迭代对象中各个元素出现的次数，以字符串为例： Demo12345678910111213141516171819202122In [19]: c = Counter('https://www.github.com')In [20]: cOut[20]:Counter(&#123;'h': 2, 't': 3, 'p': 1, 's': 1, ':': 1, '/': 2, 'w': 3, '.': 2, 'g': 1, 'i': 1, 'u': 1, 'b': 1, 'c': 1, 'o': 1, 'm': 1&#125;)In [21]: c.most_common(3)Out[21]: [('t', 3), ('w', 3), ('h', 2)] getopt主要用于处理命令行参数 Demo :1234567891011121314151617181920212223242526import getopt, sysdef main(): try: # o后面有冒号表示o要带参数，h、v则不用带参数 opts, args = getopt.getopt(sys.argv[1:], \"ho:v\", [\"help\", \"output=\"]) except getopt.GetoptError as err: # print help information and exit: print(err) # will print something like \"option -a not recognized\" usage() sys.exit(2) output = None verbose = False for o, a in opts: if o == \"-v\": verbose = True elif o in (\"-h\", \"--help\"): usage() sys.exit() elif o in (\"-o\", \"--output\"): output = a else: assert False, \"unhandled option\" # ...if __name__ == \"__main__\": main() configparser主要用于解析配置文件，参考blog Demo :12345678910111213141516171819202122232425262728293031323334353637383940414243444546&gt;&gt;&gt; import configparser# 通过configparser包的ConfigParser类创建config对象&gt;&gt;&gt; config = configparser.ConfigParser() # 读取config对象包含的所有部分, DEFAULT的配置不会显示&gt;&gt;&gt; config.sections() []# 读去配置文件，并加载到config对象中&gt;&gt;&gt; config.read('example.ini')['example.ini']&gt;&gt;&gt; config.sections()['bitbucket.org', 'topsecret.server.com']# 判断bitbucket.org是否config对象里的一个section，如果是则返回true&gt;&gt;&gt; 'bitbucket.org' in config True&gt;&gt;&gt; 'bytebong.com' in configFalse# 获取bitbucket模块的key为User对应的value&gt;&gt;&gt; config['bitbucket.org']['User'] 'hg'&gt;&gt;&gt; config['DEFAULT']['Compression']'yes'# 将topsecret.server.com部分的数据赋值给字典 topsecret&gt;&gt;&gt; topsecret = config['topsecret.server.com'] &gt;&gt;&gt; topsecret['ForwardX11']'no'&gt;&gt;&gt; topsecret['Port']'50022'# 直接遍历打印bitbucket.org部分的所有key&gt;&gt;&gt; for key in config['bitbucket.org']: print(key) ...usercompressionlevelserveraliveintervalcompressionforwardx11# 直接读取bitbucket模块的key为ForwardX11对应的value&gt;&gt;&gt; config['bitbucket.org']['ForwardX11'] 'yes' 2.网络相关requests在 requests 库出现之前，网络请求通常用标准库中的 urllib。requests 出现之后，它俨然已经成了 Python 事实上的网络请求标准库 ⚠️ requests库不是标准库的，所以要通过包管理工具导入。1pip3 install requests Demo :123456789101112&gt;&gt;&gt; r = requests.get('https://www.shiyanlou.com')&gt;&gt;&gt; r.status_code200&gt;&gt;&gt; r.headers['content-type']'text/html; charset=utf-8'&gt;&gt;&gt; r.text'\\n&lt;!DOCTYPE html&gt;\\n&lt;html lang=\"zh-CN\"&gt;\\n...'# json() 会将返回的JSON数据转化成一个Python字典&gt;&gt;&gt; r = requests.get('https://api.github.com')&gt;&gt;&gt; r.json()&#123;'current_user_url': 'https://api.github.com/user', ...&#125; 3.编码base64 base64 是一种编码方式，它可以将二进制数据编码 64 个可打印的 ASCII 字符。Base64要求把每三个8Bit的字节转换为四个6Bit的字节（38 = 46 = 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，转换后的字符串理论上将要比原来的长1/3。 【编码规则】如：010101|01 1010|1010 11|000011 -&gt; 00010101 00011010 00101011 00000011 Demo :1234567In [1]: import base64In [2]: base64.b64encode(b'Hello, world!')Out[2]: b'SGVsbG8sIHdvcmxkIQ=='In [3]: base64.b64decode(b'SGVsbG8sIHdvcmxkIQ==')Out[3]: b'Hello, world!' 4.数据分析相关lxml【待整理-楼+数据分析第一周_网页数据解析与采集】 bs4BeautifulSoup","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Knowledge Warehouse","date":"2019-08-10T05:21:14.000Z","path":"2019/08/10/Knowledge-Warehouse/","text":"书单、在线学习资源等…… 在线学习资源coding Github StackOverflow CSDN 实验楼 FreeCodeCamp codecademy Udacity Coursera edX 中国大学MOOC 微软-第9频道 微软-magazine 思科-网络课程 慕课网 W3Schools w3school中文版 GeeksforGeeks TutorialsPoint HackerRank Codebeautify https://dzone.com/（ 提供技术新闻、编程教程、及各种工具、开发者的博客等。） http://www.programcreek.com/ https://gitlab.com/ https://www.ibm.com/developerworks/learn/java/index.html（ IBM的JAVA开发者网站，很多干货。） http://www.javaworld.com/ http://www.onjava.com/ http://www.oracle.com/technetwork/java/index.html http://www.weixianmanbu.com/ （讲黑客技术的博客） CodeBinder 金老师的自学网站 MIT-EE公开课 一些在线培训网站 小象学院 极客学院 传智播客 黑马程序员 游戏学编程 Codecombat Codingame 基础篇数学 概率论、线性代数、高等数学、数学分析、高等代数、离散数学、复变函数 极客时间app - 程序员的数学基础课 麻省理工公开课 麻省理工公开课 单变量微积分 + 习题课 麻省理工公开课 多变量微积分 + 习题课 麻省理工公开课 线性代数 + 习题课 麻省理工公开课 概率论 麻省理工公开课 算法导论 麻省理工大学公开课 微积分重点 麻省理工公开课 线性代数重点 统计学 《深入浅出统计学》 《鲜活的数据》 《深入浅出数据分析》 《啤酒与尿布》 《数据之美》 《数学之美》 英语单词 扇贝单词 Merriam-Webster Dictionary（韦氏词典） 牛津高阶词典（OALD） 必应搜索单词看图片 听力 听力（SSS、VOA Special/Standard、） 计算机导论 《编程导论》 《计算机科学概论（第11版）》 《计算机伦理与专业责任》 哈佛大学公开课：计算机科学导论 哈佛大学公开课-计算机科学cs50 麻省理工学院公开课：计算机科学及编程导论 计算机科学速成课(视频) 公开课-编程范式 知乎live - 金老师的计算机基础课 网易云课堂-计算机专业课程体系 计算机组成原理 Book 《计算机组成原理》—唐朔飞 《Computer Organization &amp; Design: A Hardware/Software Interface》—David、 A.Patterson、John.L.Hennessy. 《Digital Design and Computer Architecture》 —David Harris、Sarah Harris 《隐匿在计算机背后的0和1》 《编码的奥秘》 《编译原理》 数电&amp;模电 数据结构与算法 Book 圣经 《The Art of Computer Programming》（共四章） Fundamental Algorithms Seminumerical Algorithms Sorting and Searching Combinational Algorithms 《算法导论》 《算法(英文版·第四版)》（Robert Sedgewick） 入门 《大话数据结构》 严慧敏《数据结构》 《枕边算法书》（林柏睿/崔盛一 译） 《算法图解》（Aditya Bhargava/袁国忠 译） 《挑战程序设计竞赛2：算法和数据结构》（渡部有隆/支鹏浩 译） 基础 《数据结构与算法经典问题解析》 《数学之美 （第二版）》 《编程之美》 《算法之美：隐匿在数据结构背后的原理：C++版》（左飞） 《elementary-algorithms》&lt;英-中&gt; 《算法新解》(刘新宇) 《算法竞赛_经典入门》 《Data structures using C = 数据结构&nbsp;：C语言版》 《数据结构C语言版》 《垃圾回收的算法与实现》（中村成洋等/丁灵 译）、《Algorithms (by Sanjoy Dasgupta, Christos Papadimitriou and Umesh Vazirani)》 Website Leetcode 中文版 - 领扣) Leetcode题解 GitHub - elementary-algorithms 极客时间 - 数据结构与算法之美 图灵学院website - 数据结构课 MOOC - 浙大数据结构课 浙大数据结构课-配套习题 实验楼 - 经典算法解题实战 实验楼 - 数据结构(新版) 计算机操作系统Summary 《深入理解计算机系统 / Computer System: A Programmer’s Approach》 《深入理解操作系统》（搭配CMU课程使用） 实验楼 -《操作系统原理与实践》 《编译原理》（搭配轮子哥的博客） 《单片机》 Linux Book 《Unix环境高级编程》 《UNIX编程艺术》 《深入理解LINUX内核》 《UNIX编程艺术》 《The Design of the UNIX Operating System》 《鸟哥私房菜：基础篇》 《鸟哥私房菜：服务器》 鸟哥的Linux私房菜-Online 实验楼 -《Linux基础入门》 实验楼 -《Vim编辑器》 Windows Book 《Windows核心编程 / Windows via C/C++》 《Windows核心编程》 《深入解析Windows操作系统》 计算机网络 Book 《TCP/IP协议详解》 《图解HTTP》 《计算机网络技术》（教材） 《深入理解计算机网络》 王达著 《自顶向下学TCP》 Website 实验楼 -《TCP/IP网络协议基础》 实验楼 - 网络实战项目 MOOC-计算机网络概论 软件工程 《软件工程导论》马广慧 设计模式 《大话设计模式》 《设计模式：复用面向对象》 《Head First设计模式》 代码质量 《编程珠玑 / Programming Pearls》 《重构 / Refactoring》 / Martin Fowler 《代码大全 / Code Complete 2》（第2版） The Mythical Man-Month（Essays on Software Engineering）（人月神话）《人月神话:注释版》 (美) Frederick P. Brooks, Jr.著《软件测试.第2版》 朱少民编著《软件测试实践教程》 兰景英编著《重构 改善既有代码的设计》 马丁·福勒《代码质量》 《代码整洁之道 / Clean Code》 《设计模式 / Design Patterns》 《Implementation Patterns》 《软件设计重构》 《计算机程序的构造和解释 / The Structure and Interpretation of Computer Programs》 《代码优化：有效使用内存》 《Compilers （龙书）》 《Computer Architecture: A Quantitative Approach》 软件测试 《软件测试》 工具篇Git 猴子都能看懂的Git教程 实验楼-《GitHub快速上手实战》 实验楼 - 《Git实战教程》 极客时间 - 完全学会Git、GitHub、Git Server的24堂课 Markdown 官方文档 印象笔记markdown语法 数据库Overview 《数据库系统概念》 《数据仓库经典教程》 MySQL W3School 实验楼 - MySQL基础课程 廖雪峰-SQL教程 《MySQL必知必会》 MongoDB 实验楼 - MongoDB基础教程 Redis 实验楼 - Redis基础教程 编辑器/IDEVisual Studio Code 官方文档 极客时间app - VSCode的使用 Visual Studio Code入门教程（Go） &amp;&amp; Visual Studio入门教程（C++） Cloud Studio 菜鸟教程 Microsoft OfficeExcel 秋叶Excel课程 PPT 秋叶PPT课程 Word 百度 编程语言HTML &amp; CSS 实验楼-HTML基础入门 实验楼-HTML5基础入门 实验楼-CSS速成教程 实验楼-Bootstrap3.0入门 FreeCodeCamp W3school 菜鸟教程 JavaScript JavaScript在线电子书 实验楼-JavaScript基础教程 廖雪峰 JavaScript教程 实验楼训练营 - 《实验网易云音乐》 Node.js 菜鸟教程 官方文档 实验楼 Python基础 绘制Python学习路线思维导图 实验楼 Python3简明教程 第一弹：超全Python学习资源整理（入门系列） 第二弹：超全Python学习资源整理（进阶系列） 廖雪峰python3教程 菜鸟python3教程 FreeCodeCamp Codecomy book - 《Learn Python the hard way》 book - 《简明Python教程》(A Byte of Python) book - 《Python核心编程》 book - 《Python源码剖析》 book - 《流畅的Python》 book - 《500 Lines and Less》（Github项目） 进阶 实验楼 - NumPy 使用教程 实验楼 - NumPy 百题大冲关 实验楼 - Pandas 使用教程 实验楼 - Pandas 百题大冲关 实验楼 - Flask Web 框架 实验楼 - Django基础教程 SQLAlchemy - 官方文档 Jinjia2基础-官方文档 Flask基础-官方文档 项目 Python楼+之Python实战 Python训练营-实现Up work网 A Complete Beginner’s Guide to Django【学习该Django课程，将项目部署到GitHub，记录笔记，发布一个经过自己总结的项目课】 R 实验楼R教程 R语言官方文档 R语言在线学习指南 《R语言实战（第2版）》 Go基础 无闻Go视频教程全集 bilibili Go基础教程 极客时间 - Go语言从入门到实战 极客时间 - Go语言核心36讲 实验楼-《Go By Example中文版》 Go CN每日要闻 项目 实验楼-《Go实现2048》 实验楼-《Go语言制作 MarkDown 预览器》 Java基础 《Head First Java》 实验楼-Java编程语言 菜鸟教程-Java C&amp;C++ book - 《c++primer》 book - 《谭浩强C++教程》 实验楼 - 《C语言入门教程》 book - 《C++ Primer》 实验楼 - 《C语言制作简单计算器》 C 金老师C#课 Ruby LearnRbythehardway 特定领域篇数据科学入门or科普 《集体智慧编程》 《Machine Learning in Action》 《Building Machine Learning Systems with Python》 《数据挖掘导论》 《Machine Learning for Hackers》 《深入浅出数据分析》 《谁说菜鸟不会数据分析》 《赤裸裸的统计学》 《统计数字会撒谎》 《互联网增值的第一本数据分析手册》—GrowingIO可免费下载 《精通Web Analytics 2.0》 《网站分析实战》 《数据化管理：洞悉零售及电子商务运营》—黄成明 数据分析 Python楼+之数据分析与挖掘实战 Python训练营-数据分析入门与进阶 Pandas 使用教程 Pandas 时间序列数据处理 Pandas 百题大冲关 《SciPy and NumPy》 《Python for Data Analysis》 《Bad Data Handbook》 数据可视化 Python 数据可视化 Matplotlib 及 Seaborn 使用教程 使用 Matplotlib 绘制 2D 和 3D 图形 爬虫 Python 网站信息爬虫 机器学习 Book 《数据科学入门》高蓉译 《机器学习》/周志华 《深度学习》 /Ian, Goodfellow 《Foundations of Machine Learning》 - Mehryar Mohri 《机器学习与应用》-雷明 《The Elements of Statistical Learning》 —对应的中文版：《统计学习基础》 《统计学习方法》 李航 《Machine Learning:An Algorithmic Perspective》 《Pattern Recognition And Machine Learning》 《Bayesian Reasoning and Machine Learning》 《Probabilistic Graphical Models》 《Convex Optimization》 ——Stephen 《决战大数据》—车品觉 《精益数据分析》 《The Wall Street Journal Guide to Information Graphics》—-(华尔街日报) 《Machine Learning》 吴恩达机器学习课程（Coursera） 斯坦福大学公开课 CS229 机器学习 CS231n Convolutional Neural Networks for Visual Recognition CS224n Natural Language Processing with Deep Learning 台湾大学公开课 机器学习基石 机器学习技法 Machine Learning and having it deep and structured Coursera Machine Learning Neural Networks for Machine Learning 『机器学习』入门教程汇总 《TensorFlow实战》 自然语言处理(NLP) 《语言学的邀请》 《Natural Language Processing with Python》 推荐系统 《Introduction to Semi-Supervised》 《Learning to Rank for Information Retrieval》—微软亚院 刘铁岩 《Learning to Rank for Information Retrieval and Natural Language Processing》—微软亚院 李航 《推荐系统实战》 《Graphical Models,Exponential Families,and Variational Inference》 Jordan 《推荐系统实战》项亮《计算广告学》刘鹏 云计算 Mircosoft学习资源 语音识别图像识别区块链 实验楼训练营 - 《以太坊》 游戏开发 《游戏开发原理》 运维 《DevOps和自动化运维》 提高篇职业规划 《软件开发者路线图》 《程序员修炼之道 / The Pragmatic Programmer》 软技能 《程序员自我修养》 《程序员的思维修炼》 《说服》 《高难度谈话》 笔试面试篇 GitHub-Interview-Notebook LeetCode 牛客网 猿圈网 ACM题目 数据结构和算法问题Top 50 编程面试中的链表问题Top 30 基于数组的编程问题Top 30 电面编程问题Top 50 《面试微软前必须要读的10本书》 《金三银四跳槽季，程序员面试必备书单》 book - 《cracking the code interview》 book - 《剑指offer》 book - 《程序员面试宝典》 book - 《程序员面试金典》 book - 《编程之美》 book - 《程序员面试手册》（针对初级程序员） book - 《程序员面试攻略(原书第3版) 》（针对资深程序员） others音乐 耶鲁公开课（聆听音乐） 围棋高效学习方法收藏 搜索神器 搜电子书神器 下载软件用 免费下载电子书网站-allitebooks 免费下载电子书网站-it-ebooks bookzz oreilly-freebook free-programming-book 图灵社区 GitBook wowebook 自醒 项目 ➡️ 学习；（在做项目的时候构建自己的代码仓库并组建技术栈） 构建技术栈；（而不是为学习而学习，要找到其中的乐趣并坚持下去） 技术是不断迭代的，关键是树根要稳，奠基要固。 学完一个new knowledge，学会汇总和变成自己的东西。 ⭐️if (学习）{ 禁止打开QQ微信知乎视频等任何娱乐性东西。} else if (休息) {允许打开娱乐应用} else {随你大小便} ⭐️语言／语法／框架……所有技术层面的东西都不是最重要的，数学／逻辑／设计……等思想层面的东西才是最重要的。【重心不能放在技术上，而要放在数学／逻辑思维的训练上。还有最重要的英语。】 投资理财 Web资源 YouTube频道： 我要做富翁 投资理财入门 公众号： 茶话股经 孟岩 老钱说钱 小白读财经 了解资讯类： 36氪","categories":[],"tags":[{"name":"Booklist","slug":"Booklist","permalink":"http://yoursite.com/tags/Booklist/"}]}]